diff --exclude '*~' -ruN a/third_party/gpus/rocm_configure.bzl b/third_party/gpus/rocm_configure.bzl      
--- a/third_party/gpus/rocm_configure.bzl
+++ b/third_party/gpus/rocm_configure.bzl
@@ -200,8 +200,8 @@
     inc_dirs.append("/opt/rocm/hip/include")
 
     # Add HIP-Clang headers
-    inc_dirs.append("/opt/rocm/llvm/lib/clang/8.0/include")
-    inc_dirs.append("/opt/rocm/llvm/lib/clang/9.0.0/include")
+    #inc_dirs.append("/opt/rocm/llvm/lib/clang/8.0/include")
+    #inc_dirs.append("/opt/rocm/llvm/lib/clang/9.0.0/include")
     inc_dirs.append("/opt/rocm/llvm/lib/clang/10.0.0/include")
 
     # Add rocrand and hiprand headers
@@ -222,22 +222,22 @@
 
     # Add hcc headers
     inc_dirs.append("/opt/rocm/hcc/include")
-    inc_dirs.append("/opt/rocm/hcc/compiler/lib/clang/7.0.0/include/")
-    inc_dirs.append("/opt/rocm/hcc/lib/clang/7.0.0/include")
+    #inc_dirs.append("/opt/rocm/hcc/compiler/lib/clang/7.0.0/include/")
+    #inc_dirs.append("/opt/rocm/hcc/lib/clang/7.0.0/include")
 
     # Newer hcc builds use/are based off of clang 8.0.0.
-    inc_dirs.append("/opt/rocm/hcc/compiler/lib/clang/8.0.0/include/")
-    inc_dirs.append("/opt/rocm/hcc/lib/clang/8.0.0/include")
+    #inc_dirs.append("/opt/rocm/hcc/compiler/lib/clang/8.0.0/include/")
+    #inc_dirs.append("/opt/rocm/hcc/lib/clang/8.0.0/include")
 
     # Support hcc based off clang 9.0.0, included in ROCm2.2
-    inc_dirs.append("/opt/rocm/hcc/compiler/lib/clang/9.0.0/include/")
-    inc_dirs.append("/opt/rocm/hcc/lib/clang/9.0.0/include")
+    #inc_dirs.append("/opt/rocm/hcc/compiler/lib/clang/9.0.0/include/")
+    #inc_dirs.append("/opt/rocm/hcc/lib/clang/9.0.0/include")
 
     # Support hcc based off clang 10.0.0, included in ROCm2.8
-    inc_dirs.append("/opt/rocm/hcc/compiler/lib/clang/10.0.0/include/")
-    inc_dirs.append("/opt/rocm/hcc/lib/clang/10.0.0/include")
+    #inc_dirs.append("/opt/rocm/hcc/compiler/lib/clang/10.0.0/include/")
+    #inc_dirs.append("/opt/rocm/hcc/lib/clang/10.0.0/include")
 
-    return inc_dirs
+    return [str(repository_ctx.path(spath).realpath) for spath in inc_dirs]
 
 def _enable_rocm(repository_ctx):
     if "TF_NEED_ROCM" in repository_ctx.os.environ:
